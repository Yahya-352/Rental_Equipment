// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myproject_Library.Model;

#nullable disable

namespace myproject_Library.Migrations
{
    [DbContext(typeof(EquipmentDBContext))]
    [Migration("20250514213138_db7")]
    partial class db7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("myproject_Library.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Category_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Category_Name");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Category_Description");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Audio Equipment"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Video Equipment"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Lighting Equipment"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Computer Hardware"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Photography Equipment"
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Document_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<string>("DocumentName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Document_Name");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("File_Type");

                    b.Property<string>("StoragePath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Storage_Path");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("date")
                        .HasColumnName("Upload_Date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("DocumentId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Document");

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            DocumentName = "RentalAgreement_1.pdf",
                            FileType = "PDF",
                            StoragePath = "/documents/agreements/RentalAgreement_1.pdf",
                            UploadDate = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            DocumentId = 2,
                            DocumentName = "PaymentReceipt_1.pdf",
                            FileType = "PDF",
                            StoragePath = "/documents/receipts/PaymentReceipt_1.pdf",
                            UploadDate = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            DocumentId = 3,
                            DocumentName = "DamageReport_4.pdf",
                            FileType = "PDF",
                            StoragePath = "/documents/reports/DamageReport_4.pdf",
                            UploadDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            DocumentId = 4,
                            DocumentName = "UserID_3.jpg",
                            FileType = "JPG",
                            StoragePath = "/documents/ids/UserID_3.jpg",
                            UploadDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"), 1L, 1);

                    b.Property<int?>("AvailabilityStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Availability_Status_ID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_ID");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Cost");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EquipmentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Equipment_Name");

                    b.Property<decimal?>("LatePenaltyPercentage")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Late_Penalty_Percentage");

                    b.Property<decimal?>("RentalPrice")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Rental_Price");

                    b.HasKey("EquipmentId");

                    b.HasIndex("AvailabilityStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            EquipmentId = 1,
                            AvailabilityStatusId = 1,
                            CategoryId = 5,
                            ConditionId = 1,
                            Cost = 3899.99m,
                            Description = "Professional mirrorless camera",
                            EquipmentName = "Canon EOS R5",
                            RentalPrice = 150.00m
                        },
                        new
                        {
                            EquipmentId = 2,
                            AvailabilityStatusId = 2,
                            CategoryId = 5,
                            ConditionId = 1,
                            Cost = 2199.99m,
                            Description = "Full-frame mirrorless camera",
                            EquipmentName = "Sony A7III",
                            RentalPrice = 120.00m
                        },
                        new
                        {
                            EquipmentId = 3,
                            AvailabilityStatusId = 1,
                            CategoryId = 3,
                            ConditionId = 2,
                            Cost = 1099.99m,
                            Description = "LED light panel",
                            EquipmentName = "Aputure 300D",
                            RentalPrice = 75.00m
                        },
                        new
                        {
                            EquipmentId = 4,
                            AvailabilityStatusId = 2,
                            CategoryId = 1,
                            ConditionId = 1,
                            Cost = 999.99m,
                            Description = "Shotgun microphone",
                            EquipmentName = "Sennheiser MKH 416",
                            RentalPrice = 45.00m
                        },
                        new
                        {
                            EquipmentId = 5,
                            AvailabilityStatusId = 3,
                            CategoryId = 4,
                            ConditionId = 2,
                            Cost = 2499.99m,
                            Description = "16\" MacBook Pro with M1 Pro",
                            EquipmentName = "MacBook Pro 16\"",
                            RentalPrice = 120.00m
                        },
                        new
                        {
                            EquipmentId = 6,
                            AvailabilityStatusId = 1,
                            CategoryId = 2,
                            ConditionId = 1,
                            Cost = 5995.00m,
                            Description = "Cinema camera",
                            EquipmentName = "RED Komodo 6K",
                            RentalPrice = 350.00m
                        },
                        new
                        {
                            EquipmentId = 7,
                            AvailabilityStatusId = 2,
                            CategoryId = 2,
                            ConditionId = 2,
                            Cost = 1999.99m,
                            Description = "Professional gimbal stabilizer",
                            EquipmentName = "DJI Ronin 2",
                            RentalPrice = 85.00m
                        },
                        new
                        {
                            EquipmentId = 8,
                            AvailabilityStatusId = 1,
                            CategoryId = 1,
                            ConditionId = 1,
                            Cost = 349.99m,
                            Description = "Portable audio recorder",
                            EquipmentName = "Zoom H6",
                            RentalPrice = 35.00m
                        },
                        new
                        {
                            EquipmentId = 9,
                            AvailabilityStatusId = 2,
                            CategoryId = 3,
                            ConditionId = 3,
                            Cost = 899.99m,
                            Description = "Portable strobe light",
                            EquipmentName = "Godox AD600Pro",
                            RentalPrice = 60.00m
                        },
                        new
                        {
                            EquipmentId = 10,
                            AvailabilityStatusId = 1,
                            CategoryId = 4,
                            ConditionId = 1,
                            Cost = 3999.99m,
                            Description = "Desktop computer for video editing",
                            EquipmentName = "Mac Studio",
                            RentalPrice = 150.00m
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentAvailability", b =>
                {
                    b.Property<int>("AvailabilityStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Availability_Status_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityStatusId"), 1L, 1);

                    b.Property<string>("AvailabilityStatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Availability_Status_Name");

                    b.HasKey("AvailabilityStatusId");

                    b.ToTable("Equipment_Availability");

                    b.HasData(
                        new
                        {
                            AvailabilityStatusId = 1,
                            AvailabilityStatusName = "Available"
                        },
                        new
                        {
                            AvailabilityStatusId = 2,
                            AvailabilityStatusName = "Rented"
                        },
                        new
                        {
                            AvailabilityStatusId = 3,
                            AvailabilityStatusName = "Under Maintenance"
                        },
                        new
                        {
                            AvailabilityStatusId = 4,
                            AvailabilityStatusName = "Reserved"
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentCondition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"), 1L, 1);

                    b.Property<string>("ConditionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Condition_Name");

                    b.HasKey("ConditionId")
                        .HasName("PK_Condition_ID");

                    b.ToTable("Equipment_Condition");

                    b.HasData(
                        new
                        {
                            ConditionId = 1,
                            ConditionName = "Excellent"
                        },
                        new
                        {
                            ConditionId = 2,
                            ConditionName = "Good"
                        },
                        new
                        {
                            ConditionId = 3,
                            ConditionName = "Damaged"
                        },
                        new
                        {
                            ConditionId = 4,
                            ConditionName = "Under Repair"
                        },
                        new
                        {
                            ConditionId = 5,
                            ConditionName = "Retired"
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Feedback_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Comment_Text");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("IsVisible");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = 1,
                            CommentText = "Great camera, worked perfectly for my project!",
                            Date = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsVisible = true,
                            Rating = 5,
                            Time = new TimeSpan(0, 14, 30, 0, 0),
                            TransactionId = 1,
                            UserId = 3
                        },
                        new
                        {
                            FeedbackId = 2,
                            CommentText = "Camera was excellent but sorry for the late return.",
                            Date = new DateTime(2025, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsVisible = true,
                            Rating = 4,
                            Time = new TimeSpan(0, 10, 15, 0, 0),
                            TransactionId = 2,
                            UserId = 4
                        },
                        new
                        {
                            FeedbackId = 3,
                            CommentText = "The stabilizer worked well but had some issues with battery life.",
                            Date = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsVisible = true,
                            Rating = 3,
                            Time = new TimeSpan(0, 16, 45, 0, 0),
                            TransactionId = 5,
                            UserId = 3
                        },
                        new
                        {
                            FeedbackId = 4,
                            CommentText = "Very sorry about the damage, but the recorder was excellent!",
                            Date = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsVisible = true,
                            Rating = 4,
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            TransactionId = 6,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Log_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AffectedData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("affected_data");

                    b.Property<string>("Exception")
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            LogId = 1,
                            Action = "Insert",
                            AffectedData = "{\"entityType\":\"RentalRequest\",\"id\":1}",
                            Source = "RentalRequestController",
                            Timestamp = new DateTime(2025, 4, 14, 9, 32, 15, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            LogId = 2,
                            Action = "Update",
                            AffectedData = "{\"entityType\":\"RentalRequest\",\"id\":1,\"status\":\"Approved\"}",
                            Source = "AdminController",
                            Timestamp = new DateTime(2025, 4, 14, 10, 15, 30, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 3,
                            Action = "Insert",
                            AffectedData = "{\"entityType\":\"RentalTransaction\",\"id\":1}",
                            Source = "TransactionController",
                            Timestamp = new DateTime(2025, 4, 14, 10, 20, 45, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 4,
                            Action = "Update",
                            AffectedData = "{\"entityType\":\"Equipment\",\"id\":1,\"status\":\"Available\"}",
                            Source = "ReturnController",
                            Timestamp = new DateTime(2025, 4, 20, 16, 45, 22, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 5,
                            Action = "Insert",
                            AffectedData = "{\"entityType\":\"ReturnRecord\",\"id\":1}",
                            Source = "ReturnController",
                            Timestamp = new DateTime(2025, 4, 20, 16, 50, 10, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 6,
                            Action = "Insert",
                            AffectedData = "{\"entityType\":\"Feedback\",\"id\":1}",
                            Source = "FeedbackController",
                            Timestamp = new DateTime(2025, 4, 21, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Notification_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("MessageContent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Message_content");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            MessageContent = "Your rental request for Canon EOS R5 has been approved.",
                            Status = "Read",
                            Type = "Approval",
                            UserId = 3
                        },
                        new
                        {
                            NotificationId = 2,
                            MessageContent = "Your rental request for Sony A7III has been approved.",
                            Status = "Read",
                            Type = "Approval",
                            UserId = 4
                        },
                        new
                        {
                            NotificationId = 3,
                            MessageContent = "Your rental for Zoom H6 is due for return tomorrow.",
                            Status = "Read",
                            Type = "Reminder",
                            UserId = 4
                        },
                        new
                        {
                            NotificationId = 4,
                            MessageContent = "Your rental for Aputure 300D has been approved.",
                            Status = "Unread",
                            Type = "Approval",
                            UserId = 3
                        },
                        new
                        {
                            NotificationId = 5,
                            MessageContent = "Thank you for your feedback on the Canon EOS R5 rental.",
                            Status = "Unread",
                            Type = "Feedback",
                            UserId = 3
                        },
                        new
                        {
                            NotificationId = 6,
                            MessageContent = "Your rental request for Godox AD600Pro has been rejected.",
                            Status = "Unread",
                            Type = "Rejection",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Payment_Status_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentStatusId"), 1L, 1);

                    b.Property<string>("PaymentStatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payment_Status_Name");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("Payment_Status");

                    b.HasData(
                        new
                        {
                            PaymentStatusId = 1,
                            PaymentStatusName = "Paid"
                        },
                        new
                        {
                            PaymentStatusId = 2,
                            PaymentStatusName = "Pending"
                        },
                        new
                        {
                            PaymentStatusId = 3,
                            PaymentStatusName = "Cancelled"
                        },
                        new
                        {
                            PaymentStatusId = 4,
                            PaymentStatusName = "Refunded"
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.RentalRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Request_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    b.Property<int?>("RequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Request_Status_ID");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("return_Date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start_Date");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Total_Cost");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("RequestId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Rental_Request");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            EquipmentId = 1,
                            RequestStatusId = 3,
                            ReturnDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 750.00m,
                            UserId = 3
                        },
                        new
                        {
                            RequestId = 2,
                            EquipmentId = 2,
                            RequestStatusId = 3,
                            ReturnDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 840.00m,
                            UserId = 4
                        },
                        new
                        {
                            RequestId = 3,
                            EquipmentId = 3,
                            RequestStatusId = 2,
                            ReturnDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 300.00m,
                            UserId = 3
                        },
                        new
                        {
                            RequestId = 4,
                            EquipmentId = 4,
                            RequestStatusId = 2,
                            ReturnDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 315.00m,
                            UserId = 4
                        },
                        new
                        {
                            RequestId = 5,
                            EquipmentId = 5,
                            RequestStatusId = 1,
                            ReturnDate = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 840.00m,
                            UserId = 3
                        },
                        new
                        {
                            RequestId = 6,
                            EquipmentId = 6,
                            RequestStatusId = 1,
                            ReturnDate = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 2450.00m,
                            UserId = 4
                        },
                        new
                        {
                            RequestId = 7,
                            EquipmentId = 7,
                            RequestStatusId = 3,
                            ReturnDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 595.00m,
                            UserId = 3
                        },
                        new
                        {
                            RequestId = 8,
                            EquipmentId = 8,
                            RequestStatusId = 3,
                            ReturnDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 175.00m,
                            UserId = 4
                        },
                        new
                        {
                            RequestId = 9,
                            EquipmentId = 9,
                            RequestStatusId = 4,
                            ReturnDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 480.00m,
                            UserId = 3
                        },
                        new
                        {
                            RequestId = 10,
                            EquipmentId = 10,
                            RequestStatusId = 1,
                            ReturnDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalCost = 1050.00m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.RentalTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Amount_Paid");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_Status_ID");

                    b.Property<decimal?>("RentalFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Rental_Fee");

                    b.Property<int?>("RentalPeriod")
                        .HasColumnType("int")
                        .HasColumnName("Rental_Period");

                    b.Property<DateTime?>("RentalReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("Rental_Return_Date");

                    b.Property<DateTime?>("RentalStartDate")
                        .HasColumnType("date")
                        .HasColumnName("Rental_Start_Date");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("Request_ID");

                    b.Property<decimal?>("TotalFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Total_Fee");

                    b.HasKey("TransactionId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("RequestId");

                    b.ToTable("Rental_Transaction");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            AmountPaid = 750.00m,
                            Deposit = 500.00m,
                            EquipmentId = 1,
                            PaymentStatusId = 1,
                            RentalFee = 750.00m,
                            RentalPeriod = 5,
                            RentalReturnDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 1,
                            TotalFee = 750.00m
                        },
                        new
                        {
                            TransactionId = 2,
                            AmountPaid = 840.00m,
                            Deposit = 500.00m,
                            EquipmentId = 2,
                            PaymentStatusId = 1,
                            RentalFee = 840.00m,
                            RentalPeriod = 7,
                            RentalReturnDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 2,
                            TotalFee = 840.00m
                        },
                        new
                        {
                            TransactionId = 3,
                            AmountPaid = 0.00m,
                            Deposit = 300.00m,
                            EquipmentId = 3,
                            PaymentStatusId = 2,
                            RentalFee = 300.00m,
                            RentalPeriod = 4,
                            RentalReturnDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 3,
                            TotalFee = 300.00m
                        },
                        new
                        {
                            TransactionId = 4,
                            AmountPaid = 0.00m,
                            Deposit = 250.00m,
                            EquipmentId = 4,
                            PaymentStatusId = 2,
                            RentalFee = 315.00m,
                            RentalPeriod = 7,
                            RentalReturnDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 4,
                            TotalFee = 315.00m
                        },
                        new
                        {
                            TransactionId = 5,
                            AmountPaid = 595.00m,
                            Deposit = 400.00m,
                            EquipmentId = 7,
                            PaymentStatusId = 1,
                            RentalFee = 595.00m,
                            RentalPeriod = 7,
                            RentalReturnDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 7,
                            TotalFee = 595.00m
                        },
                        new
                        {
                            TransactionId = 6,
                            AmountPaid = 175.00m,
                            Deposit = 100.00m,
                            EquipmentId = 8,
                            PaymentStatusId = 1,
                            RentalFee = 175.00m,
                            RentalPeriod = 5,
                            RentalReturnDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalStartDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 8,
                            TotalFee = 175.00m
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.RequestStatus", b =>
                {
                    b.Property<int>("RequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Request_Status_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestStatusId"), 1L, 1);

                    b.Property<string>("RequestStatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_Status_Name");

                    b.HasKey("RequestStatusId");

                    b.ToTable("Request_Status");

                    b.HasData(
                        new
                        {
                            RequestStatusId = 1,
                            RequestStatusName = "Pending"
                        },
                        new
                        {
                            RequestStatusId = 2,
                            RequestStatusName = "Approved"
                        },
                        new
                        {
                            RequestStatusId = 3,
                            RequestStatusName = "Completed"
                        },
                        new
                        {
                            RequestStatusId = 4,
                            RequestStatusName = "Rejected"
                        },
                        new
                        {
                            RequestStatusId = 5,
                            RequestStatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.ReturnRecord", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Return_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnId"), 1L, 1);

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("Actual_Return_Date");

                    b.Property<decimal?>("AddtionalCharges")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Addtional_Charges");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    b.Property<int?>("LateReturnDays")
                        .HasColumnType("int")
                        .HasColumnName("Late_Return_Days");

                    b.Property<decimal?>("LateReturnFees")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Late_Return_fees");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    b.HasKey("ReturnId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Return_Record");

                    b.HasData(
                        new
                        {
                            ReturnId = 1,
                            ActualReturnDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AddtionalCharges = 0.00m,
                            ConditionId = 1,
                            LateReturnDays = 0,
                            LateReturnFees = 0.00m,
                            TransactionId = 1
                        },
                        new
                        {
                            ReturnId = 2,
                            ActualReturnDate = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AddtionalCharges = 0.00m,
                            ConditionId = 1,
                            LateReturnDays = 1,
                            LateReturnFees = 120.00m,
                            TransactionId = 2
                        },
                        new
                        {
                            ReturnId = 3,
                            ActualReturnDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AddtionalCharges = 0.00m,
                            ConditionId = 2,
                            LateReturnDays = 0,
                            LateReturnFees = 0.00m,
                            TransactionId = 5
                        },
                        new
                        {
                            ReturnId = 4,
                            ActualReturnDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AddtionalCharges = 50.00m,
                            ConditionId = 3,
                            LateReturnDays = 0,
                            LateReturnFees = 0.00m,
                            TransactionId = 6
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Role_Name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "af1255c9-ef67-4324-beec-eae03bf14713",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "0e462049-6047-4e1e-ae6d-96a53cabce296",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "c6ac44ab-cc96-489f-8e1f-3cef3b89276c",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("myproject_Library.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c17d3ef-2292-4259-a909-e277caf1ce33",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            Password = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d988d38d-3a1c-4c3b-b6a3-de8bc506b2d3",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcae1509-1b8e-476c-b698-d749a567e9dc",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            Password = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d7052f5-cf83-4252-b82e-7af40956aa64",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95dfee66-78de-44fb-930f-ea5368f6121c",
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER",
                            Password = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ab551e1-2f1c-4584-95b9-c97bf99b821b",
                            TwoFactorEnabled = false,
                            UserName = "Manager"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f06f50f1-730c-4a79-8af4-0a0f95f411b5",
                            Email = "rehan@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "REHAN@EXAMPLE.COM",
                            NormalizedUserName = "REHAN",
                            Password = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+oUrq/9bgM9HlHWRRzaELKRPWAme3qSKyyO/pBAcR9EqXn5uv+iFbOONeiYlJoaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb4fcb81-99a1-4261-8507-7c074ef76ff5",
                            TwoFactorEnabled = false,
                            UserName = "Rehan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myproject_Library.Model.Document", b =>
                {
                    b.HasOne("myproject_Library.Model.RentalTransaction", "Transaction")
                        .WithMany("Documents")
                        .HasForeignKey("TransactionId");

                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Document_User");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.Equipment", b =>
                {
                    b.HasOne("myproject_Library.Model.EquipmentAvailability", "AvailabilityStatus")
                        .WithMany("Equipment")
                        .HasForeignKey("AvailabilityStatusId")
                        .HasConstraintName("FK_Equipment_Equipment_Availability");

                    b.HasOne("myproject_Library.Model.Category", "Category")
                        .WithMany("Equipment")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Equipment_Category");

                    b.HasOne("myproject_Library.Model.EquipmentCondition", "Condition")
                        .WithMany("Equipment")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_Equipment_Condition_ID");

                    b.Navigation("AvailabilityStatus");

                    b.Navigation("Category");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("myproject_Library.Model.Feedback", b =>
                {
                    b.HasOne("myproject_Library.Model.RentalTransaction", "Transaction")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Feedback_Rental_Transaction");

                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.Log", b =>
                {
                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Logs_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.Notification", b =>
                {
                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notifications_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalRequest", b =>
                {
                    b.HasOne("myproject_Library.Model.Equipment", "Equipment")
                        .WithMany("RentalRequests")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_Rental_Request_Equipment");

                    b.HasOne("myproject_Library.Model.RequestStatus", "RequestStatus")
                        .WithMany("RentalRequests")
                        .HasForeignKey("RequestStatusId")
                        .HasConstraintName("FK_Rental_Request_Request_Status");

                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("RentalRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Rental_Request_User");

                    b.Navigation("Equipment");

                    b.Navigation("RequestStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalTransaction", b =>
                {
                    b.HasOne("myproject_Library.Model.Equipment", "Equipment")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_Rental_Transaction_Equipment");

                    b.HasOne("myproject_Library.Model.PaymentStatus", "PaymentStatus")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_Rental_Transaction_Payment_Status");

                    b.HasOne("myproject_Library.Model.RentalRequest", "Request")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_Rental_Transaction_Rental_Request");

                    b.Navigation("Equipment");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("myproject_Library.Model.ReturnRecord", b =>
                {
                    b.HasOne("myproject_Library.Model.EquipmentCondition", "Condition")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_Return_Record_Condition_ID");

                    b.HasOne("myproject_Library.Model.RentalTransaction", "Transaction")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Return_Record_Rental_Transaction");

                    b.Navigation("Condition");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("myproject_Library.Model.User", b =>
                {
                    b.HasOne("myproject_Library.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("myproject_Library.Model.Category", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("myproject_Library.Model.Equipment", b =>
                {
                    b.Navigation("RentalRequests");

                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentAvailability", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentCondition", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("ReturnRecords");
                });

            modelBuilder.Entity("myproject_Library.Model.PaymentStatus", b =>
                {
                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalRequest", b =>
                {
                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalTransaction", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Feedbacks");

                    b.Navigation("ReturnRecords");
                });

            modelBuilder.Entity("myproject_Library.Model.RequestStatus", b =>
                {
                    b.Navigation("RentalRequests");
                });

            modelBuilder.Entity("myproject_Library.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("myproject_Library.Model.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Feedbacks");

                    b.Navigation("Logs");

                    b.Navigation("Notifications");

                    b.Navigation("RentalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
