// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myproject_Library.Model;

#nullable disable

namespace myproject_Library.Migrations
{
    [DbContext(typeof(EquipmentDBContext))]
    [Migration("20250510173021_AddTransactionIdToDocument3")]
    partial class AddTransactionIdToDocument3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("myproject_Library.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Category_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Category_Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("myproject_Library.Model.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Document_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<string>("DocumentName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Document_Name");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("File_Type");

                    b.Property<string>("StoragePath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Storage_Path");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("date")
                        .HasColumnName("Upload_Date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("DocumentId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("myproject_Library.Model.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"), 1L, 1);

                    b.Property<int?>("AvailabilityStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Availability_Status_ID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_ID");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Cost");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EquipmentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Equipment_Name");

                    b.Property<decimal?>("RentalPrice")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Rental_Price");

                    b.HasKey("EquipmentId");

                    b.HasIndex("AvailabilityStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentAvailability", b =>
                {
                    b.Property<int>("AvailabilityStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Availability_Status_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityStatusId"), 1L, 1);

                    b.Property<string>("AvailabilityStatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Availability_Status_Name");

                    b.HasKey("AvailabilityStatusId");

                    b.ToTable("Equipment_Availability");
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentCondition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"), 1L, 1);

                    b.Property<string>("ConditionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Condition_Name");

                    b.HasKey("ConditionId")
                        .HasName("PK_Condition_ID");

                    b.ToTable("Equipment_Condition");
                });

            modelBuilder.Entity("myproject_Library.Model.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Feedback_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Comment_Text");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("myproject_Library.Model.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Log_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AffectedData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("affected_data");

                    b.Property<string>("Exception")
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("myproject_Library.Model.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Notification_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("MessageContent")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Message_content");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("myproject_Library.Model.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Payment_Status_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentStatusId"), 1L, 1);

                    b.Property<string>("PaymentStatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payment_Status_Name");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("Payment_Status");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Request_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    b.Property<int?>("RequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Request_Status_ID");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("return_Date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("Start_Date");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Total_Cost");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("RequestId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Rental_Request");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Amount_Paid");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_Status_ID");

                    b.Property<decimal?>("RentalFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Rental_Fee");

                    b.Property<int?>("RentalPeriod")
                        .HasColumnType("int")
                        .HasColumnName("Rental_Period");

                    b.Property<DateTime?>("RentalReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("Rental_Return_Date");

                    b.Property<DateTime?>("RentalStartDate")
                        .HasColumnType("date")
                        .HasColumnName("Rental_Start_Date");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("Request_ID");

                    b.Property<decimal?>("TotalFee")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Total_Fee");

                    b.HasKey("TransactionId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("RequestId");

                    b.ToTable("Rental_Transaction");
                });

            modelBuilder.Entity("myproject_Library.Model.RequestStatus", b =>
                {
                    b.Property<int>("RequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Request_Status_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestStatusId"), 1L, 1);

                    b.Property<string>("RequestStatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Request_Status_Name");

                    b.HasKey("RequestStatusId");

                    b.ToTable("Request_Status");
                });

            modelBuilder.Entity("myproject_Library.Model.ReturnRecord", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Return_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnId"), 1L, 1);

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("Actual_Return_Date");

                    b.Property<decimal?>("AddtionalCharges")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Addtional_Charges");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    b.Property<int?>("LateReturnDays")
                        .HasColumnType("int")
                        .HasColumnName("Late_Return_Days");

                    b.Property<decimal?>("LateReturnFees")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Late_Return_fees");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("Transaction_ID");

                    b.HasKey("ReturnId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Return_Record");
                });

            modelBuilder.Entity("myproject_Library.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Role_Name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("myproject_Library.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("myproject_Library.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("myproject_Library.Model.Document", b =>
                {
                    b.HasOne("myproject_Library.Model.RentalTransaction", "Transaction")
                        .WithMany("Documents")
                        .HasForeignKey("TransactionId");

                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Document_User");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.Equipment", b =>
                {
                    b.HasOne("myproject_Library.Model.EquipmentAvailability", "AvailabilityStatus")
                        .WithMany("Equipment")
                        .HasForeignKey("AvailabilityStatusId")
                        .HasConstraintName("FK_Equipment_Equipment_Availability");

                    b.HasOne("myproject_Library.Model.Category", "Category")
                        .WithMany("Equipment")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Equipment_Category");

                    b.HasOne("myproject_Library.Model.EquipmentCondition", "Condition")
                        .WithMany("Equipment")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_Equipment_Condition_ID");

                    b.Navigation("AvailabilityStatus");

                    b.Navigation("Category");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("myproject_Library.Model.Feedback", b =>
                {
                    b.HasOne("myproject_Library.Model.RentalTransaction", "Transaction")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Feedback_Rental_Transaction");

                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.Log", b =>
                {
                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Logs_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.Notification", b =>
                {
                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notifications_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalRequest", b =>
                {
                    b.HasOne("myproject_Library.Model.Equipment", "Equipment")
                        .WithMany("RentalRequests")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_Rental_Request_Equipment");

                    b.HasOne("myproject_Library.Model.RequestStatus", "RequestStatus")
                        .WithMany("RentalRequests")
                        .HasForeignKey("RequestStatusId")
                        .HasConstraintName("FK_Rental_Request_Request_Status");

                    b.HasOne("myproject_Library.Model.User", "User")
                        .WithMany("RentalRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Rental_Request_User");

                    b.Navigation("Equipment");

                    b.Navigation("RequestStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalTransaction", b =>
                {
                    b.HasOne("myproject_Library.Model.Equipment", "Equipment")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_Rental_Transaction_Equipment");

                    b.HasOne("myproject_Library.Model.PaymentStatus", "PaymentStatus")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_Rental_Transaction_Payment_Status");

                    b.HasOne("myproject_Library.Model.RentalRequest", "Request")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_Rental_Transaction_Rental_Request");

                    b.Navigation("Equipment");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("myproject_Library.Model.ReturnRecord", b =>
                {
                    b.HasOne("myproject_Library.Model.EquipmentCondition", "Condition")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_Return_Record_Condition_ID");

                    b.HasOne("myproject_Library.Model.RentalTransaction", "Transaction")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Return_Record_Rental_Transaction");

                    b.Navigation("Condition");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("myproject_Library.Model.User", b =>
                {
                    b.HasOne("myproject_Library.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("myproject_Library.Model.Category", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("myproject_Library.Model.Equipment", b =>
                {
                    b.Navigation("RentalRequests");

                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentAvailability", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("myproject_Library.Model.EquipmentCondition", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("ReturnRecords");
                });

            modelBuilder.Entity("myproject_Library.Model.PaymentStatus", b =>
                {
                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalRequest", b =>
                {
                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("myproject_Library.Model.RentalTransaction", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Feedbacks");

                    b.Navigation("ReturnRecords");
                });

            modelBuilder.Entity("myproject_Library.Model.RequestStatus", b =>
                {
                    b.Navigation("RentalRequests");
                });

            modelBuilder.Entity("myproject_Library.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("myproject_Library.Model.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Feedbacks");

                    b.Navigation("Logs");

                    b.Navigation("Notifications");

                    b.Navigation("RentalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
